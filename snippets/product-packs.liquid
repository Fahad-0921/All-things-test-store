<div class="pack-box active-pack pack-1" data-pack-name="1 Pack">
  <div class="pack-inner-content">
    <!-- Checkbox -->
    <input type="radio" checked="checked" class="pack-checkbox" />

    <!-- Product Image -->
    {% assign first_variant = product.variants.first %}
    {% if first_variant %}
      <img src="{{ first_variant.image | img_url: 'medium' }}" alt="{{ first_variant.title }}" class="product-image">
    
      <!-- Pack Title and Save Text -->
      <div class="pack-details">
        <h2>{{ first_variant.title }}</h2>
      </div>
        <p class="savings-text">{{ settings.save_text }}</p>

      <!-- Price Section -->
      <div class="price-section">
        <span class="real-price">{{ first_variant.price | money }}</span>
        {% if first_variant.compare_at_price > first_variant.price %}
          <span class="compare-price">{{ first_variant.compare_at_price | money }}</span>
        {% endif %}
      </div>
    {% endif %}
  </div>
</div>

<div class="pack-box pack-2" data-pack-name="2 Pack">
  <div class="pack-inner-content">
    <!-- Checkbox -->
    <input type="radio" class="pack-checkbox" />

    <!-- Product Image -->
    {% assign second_variant = product.variants[1] %}
    {% if second_variant %}
      <img src="{{ second_variant.image | img_url: 'medium' }}" alt="{{ second_variant.title }}" class="product-image">
    
      <!-- Pack Title and Save Text -->
     <div class="pack-details">
  <div class="pack-row">
    <h2>{{ second_variant.title }}</h2>
    <p class="savings-text">{{ settings.my_save_text }}</p>
  </div>
  <span class="free-ship-text">Includes <span class="color-purple-bold">FREE</span> shipping</span>
</div>


      <!-- Price Section -->
      <div class="price-section">
        <span class="real-price">{{ second_variant.price | money }}</span>
        {% if second_variant.compare_at_price > second_variant.price %}
          <span class="compare-price">{{ second_variant.compare_at_price | money }}</span>
        {% endif %}
      </div>
    {% endif %}
  </div>

  
  <!-- Free Product (Bottom of Pack 2) -->
  <div class="free-product">
    {% assign free_product = all_products[settings.pack_2_free_product] %}
    {% if free_product %}
      <img src="{{ free_product.featured_image | img_url: 'medium' }}" alt="{{ free_product.title }}">
      <p>{{ settings.pack_2_free_product_text }}</p>
    {% else %}
      <p>No free product selected</p>
    {% endif %}
  </div>
</div>

<div class="random-wrapper"> 
<p class="random-text" id="random-orders-text">
    <span class="blinking-dot"></span>
  {{ settings.my_blink_text }}

</p>
  <span class="count-contianer">
  <span id="order-count"></span> 
  <span>orders!</span>
  </span>
</div>

<button style="min-width: 320px; cursor: pointer; background-color:#959cba; color: white;  height: 60px; border: none; border-radius: 6px; font-size: 18px; font-weight: bold; width: 100%;" id="product-add-to-cart" class="add-to-cart">CLAIM OFFER</button>


  <!-- ========== FOR RANDOM ORDER COUNTING ======= -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    function updateOrderCount() {
      // Generate a random number between 50 and 100 (adjust range as needed)
      var randomOrderCount = Math.floor(Math.random() * (150 - 5 + 1)) + 50;
      
      // Insert the random number into the text
      document.getElementById('order-count').textContent = randomOrderCount;
    }

    // Call the function initially to set the first random number
    updateOrderCount();

    // Set an interval to update the number every 30 seconds (30000 milliseconds)
    setInterval(updateOrderCount, 5000); // 30 seconds
  });
</script>



<script>
  
let selectedPack = '1 Pack'; // Default to 1 Pack (Pack 1 is active by default)

// Handle pack selection
document.querySelectorAll('.pack-box').forEach(box => {
  box.addEventListener('click', function() {
    // Remove active class from all packs
    document.querySelectorAll('.pack-box').forEach(box => {
      box.classList.remove('active-pack');
      box.querySelector('.pack-checkbox').checked = false; // Uncheck all checkboxes
    });

    // Set clicked pack as active
    this.classList.add('active-pack');
    this.querySelector('.pack-checkbox').checked = true; // Check the clicked checkbox

    // Set the selected pack
    selectedPack = this.dataset.packName;
  });
});


// Listen for the existing ATC button click event
document.getElementById('product-add-to-cart').addEventListener('click', function(event) {
  event.preventDefault(); // Prevent the default form submission

  const itemsToAdd = [];

  // Determine the selected variant based on the active pack
  let variantId;
  if (selectedPack === '1 Pack') {
    variantId = "{{ product.variants.first.id }}"; // First variant ID for Pack 1
  } else if (selectedPack === '2 Pack') {
    variantId = "{{ product.variants[1].id }}"; // Second variant ID for Pack 2
  }

  // Add the selected pack variant to the cart
  if (variantId) {
    itemsToAdd.push({
      id: variantId,
      quantity: 1,
      properties: { 'Pack': selectedPack }
    });
  }

  // If Pack 2 is selected, add the free product as well
  if (selectedPack === '2 Pack') {
    const freeProductVariantId = '{{ all_products[settings.pack_2_free_product].variants.first.id }}'; // Dynamically get free product variant ID
    if (freeProductVariantId) {
      itemsToAdd.push({
        id: freeProductVariantId,
        quantity: 1
      });
    }
  }

  // Add items to cart via AJAX
  addItemsToCart(itemsToAdd);
});

// Function to add items to the cart via AJAX
function addItemsToCart(items) {
    $.ajax({
        url: '/cart/add.js',
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({ items: items }),
        dataType: 'json',
        success: function(data) {
            console.log('Items added to cart:', data);

            // Update the cart drawer content
            updateCartDrawer();

            // Update the cart icon
            updateCartIcon();

            // Ensure cart drawer is not empty and open it
            $('cart-drawer').removeClass('is-empty');
            $('.drawer__inner-empty').hide();
            $('cart-drawer').load(location.href + " #CartDrawer");
            $('#cart-icon-bubble').load(location.href + " #cart-icon-bubble");

            // Open the cart drawer using vanilla JavaScript
            const cartDrawer = document.querySelector('cart-drawer');
            if (cartDrawer) {
                cartDrawer.open();
                console.log('Cart drawer opened');
            } else {
                console.error('Cart drawer element not found');
            }

        },
        error: function(error) {
            console.error('Error adding items to cart:', error);
            showNotification('There was an error adding items to the cart.');
        }
    });
}

  // Function to update the cart drawer after items are added or removed
function updateCartDrawer() {
    $.ajax({
        url: '/cart.js',
        method: 'GET',
        dataType: 'json',
        success: function(data) {
            const cartDrawer = document.querySelector('cart-drawer');

            if (cartDrawer) {
                cartDrawer.updateContent(); // Update cart drawer content

                // Check if Pack 2 is still in the cart
                let isPack2InCart = false;
                let freeProductVariantId = '{{ all_products[settings.pack_2_free_product].variants.first.id }}';

                data.items.forEach(function(item) {
                    if (item.properties && item.properties['Pack'] === '2 Pack') {
                        isPack2InCart = true;
                    }
                });

                // If Pack 2 is not found in the cart, remove the free product
                if (!isPack2InCart) {
                    removeItemFromCart(freeProductVariantId); // Function to remove the free product
                }

                console.log('Cart drawer content updated');
            } else {
                console.error('Cart drawer element not found');
            }
        },
        error: function(error) {
            console.error('Error updating cart drawer:', error);
        }
    });
}

// Function to remove an item from the cart
function removeItemFromCart(variantId) {
    $.ajax({
        url: '/cart/change.js',
        method: 'POST',
        data: JSON.stringify({
            id: variantId,
            quantity: 0
        }),
        dataType: 'json',
        success: function(data) {
            console.log('Free product removed from cart:', data);
            // Optionally, update the cart drawer and cart icon
            updateCartDrawer();
            updateCartIcon();
        },
        error: function(error) {
            console.error('Error removing item from cart:', error);
        }
    });
}


  
// Function to update the cart icon bubble
function updateCartIcon() {
    $.ajax({
        url: '/cart.js',
        method: 'GET',
        dataType: 'json',
        success: function(data) {
            $('#cart-icon-bubble').text(data.item_count);
        },
        error: function(error) {
            console.error('Error updating cart icon:', error);
        }
    });
}

// Optional: Show a notification message
function showNotification(message) {
    alert(message); // Replace with your custom notification UI
}
</script>

